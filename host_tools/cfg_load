#!/usr/bin/python3 -u

# 2022 eCTF
# Configure Tool
# 0xDACC
#
# Loads the config. This tool meets all functional and security requirements

import argparse
from distutils.command.config import config
import logging
from pathlib import Path
import socket
import struct
from Crypto.Cipher import AES

from util import print_banner, send_packets, RESP_OK, CONFIGURATION_ROOT, LOG_FORMAT

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def load_configuration(socket_number: int, config_file: Path):
    print_banner("SAFFIRe Configuration Tool")

    log.info("Reading configuration file...")
    configuration = config_file.read_bytes()
    size = len(configuration)

    # Connect to the bootloader
    log.info("Connecting socket...")
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect(("saffire-net", socket_number))

        # Send configure command
        log.info("Sending configure command...")
        sock.sendall(b"C")

        # Receive bootloader acknowledgement
        while sock.recv(1) != b"C":
            pass

        # Wait until bootloader sends second confirmation because sometimes an extra byte is send
        while sock.recv(1) != RESP_OK:
            pass

        # Send the size
        log.info("Sending the size...")
        payload = struct.pack(">I", size)
        sock.send(payload)
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bootloader responded with {repr(response)}")

        log.info("Sending configuration...")

        # Sending first password section
        log.info("sending first password")
        send_packets(sock, configuration[0:16])
        
        # Recieve crypto information
        log.info("recieving key")
        key = sock.recv(16)
        log.info("recieving iv")
        iv = sock.recv(16)

        # Dencrypt
        log.info("decrytpting")
        cip = AES.new(key, AES.MODE_CBC, iv)
        decrypted_cfg = cip.decrypt(configuration)

        # send second password for verification
        log.info("sending second password")
        send_packets(sock, decrypted_cfg[-16:])

        # send rest of data
        log.info("sending rest of data")
        send_packets(sock, decrypted_cfg[16:-16])

        # wait for bootloader to finish
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bootloader responded with {repr(response)}")
        log.info("Firmware configured\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--socket",
        help="Port number of the socket to connect the host to the bootloader.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--config-file",
        help="Name of the protected configuration to load.",
        required=True,
    )

    args = parser.parse_args()

    config_file = CONFIGURATION_ROOT / args.config_file

    load_configuration(args.socket, config_file)


if __name__ == "__main__":
    main()
