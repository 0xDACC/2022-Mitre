#!/usr/bin/python3 -u

# 2022 eCTF
# Memory Readback Tool
# 0xDACC
#
# This tool meets all functional and security requirements. This tool is a little more complicated than the example so plenty of comments will be supplied

import argparse
import logging
import socket
from pathlib import Path
from urllib import response
from Crypto.Cipher import AES

from util import print_banner, LOG_FORMAT, send_packets

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def readback(socket_number, region, num_bytes):
    # Print Banner
    print_banner("SAFFIRe Memory Readback Tool")

    # Connect to the bootoader
    log.info("Connecting socket...")
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        password = Path("/secrets/password").read_bytes()
        key = Path("/secrets/key").read_bytes()
        iv = Path("/secrets/iv").read_bytes()

        pbytes = num_bytes + (16 - num_bytes % 16)  

        sock.connect(("saffire-net", socket_number))

        # Send readback command
        log.info("Sending readback command...")
        sock.send(b"R")

        # Receive bootloader acknowledgement
        log.info("Waiting for bootloader to enter readback mode...")
        while sock.recv(1) != b"R":
            pass
        
        # Send password over uart to check.
        log.info("Sending password...")
        send_packets(sock, password)
        response = sock.recv(1)
        if response == b'\x01':
            exit(f"ERROR: Bad password. Bootloader responded with {repr(response)}")

        # Send the region identifier
        log.info("Sending the region identifier to read back...")
        if region == "firmware":
            # send firmware identifier
            sock.send(b"F")
            # get acknowledgement
            log.info("Waiting for bootloader to confirm the region...")
            while sock.recv(1) != b"F":
                pass
        elif region == "configuration":
            # send configuration identifier
            sock.send(b"C")
            # get acknowledgement
            log.info("Waiting for bootloader to confirm the region...")
            while sock.recv(1) != b"C":
                pass
        else:
            # send character other than an identifier to exit readback
            sock.send(b"Q")
            return

        # Send the number of bytes to read
        if region == "configuration":
            # Yes this is a little inefficient but oh well
            pbytes = num_bytes
        
        size = int.to_bytes(pbytes, 4, "big")
        sock.send(size)

        # Receive firmware data
        log.info("Receiving firmware...")
        bytes_remaining = pbytes
        nbytes = pbytes
        fw = b""
        while bytes_remaining > 0:
            nbytes = 4096 if bytes_remaining > 4096 else bytes_remaining
            data = sock.recv(nbytes)
            num_received = len(data)
            fw += data
            bytes_remaining -= num_received

        if region == "firmware":
            # New aes object
            cipher = AES.new(key, AES.MODE_CBC, iv)

            # Note: the data is 'pre-padded'
            # it has extra data that we didnt ask for, just for encryption purposes

            # Decrypt it
            decrypted_firmware = cipher.decrypt(fw)

            # Clip off the padding 
            clipped_firmware = decrypted_firmware[0:num_bytes]

            # print it
            print(f"{clipped_firmware.hex()}")
        else:
            # Since p bytes was set to num bytes, it should be ready to go here, no clipping needed.
            # idk why it wont let me just not decrypt it but somewhere theres a bug :)
            print(f"{fw.hex()}")


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--socket",
        help="Port number of the socket to connect the host to the bootloader.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--region",
        help="The region to read.",
        choices=["firmware", "configuration"],
        required=True,
    )
    parser.add_argument(
        "--num-bytes",
        help="The number of bytes to read from the region.",
        type=int,
        required=True,
    )

    args = parser.parse_args()

    readback(args.socket, args.region, args.num_bytes)


if __name__ == "__main__":
    main()
