#!/usr/bin/python3 -u

# 2022 eCTF
# Protect Firmware Tool
# 0xDACC
#
# This tool produces a protected firmware package which meets all functional and security requirements. It's awful complicated so there will be comments along the way

import argparse
from importlib.resources import path
import json
import logging
from Crypto.Cipher import AES
from pathlib import Path
import os

from util import print_banner, FIRMWARE_ROOT, LOG_FORMAT

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def protect_firmware(firmware_file: Path, version: int, release_message: str, protected_firmware: Path ):
    print_banner("SAFFIRe Firmware Protect Tool")

    # Read in the raw firmware binary
    log.info("Reading the firmware...\n")
    firmware_data = firmware_file.read_bytes()

    # Encrypt the firmware
    log.info("Encrypting the firmware...\n")

    # Set the crypto information
    key = Path("/secrets/key").read_bytes()
    iv = Path("/secrets/iv").read_bytes()
    password = Path("/secrets/password").read_bytes()

    # because we don't know the size of the file, we need to 
    # pad it so it divides by 16
    padded_firmware = firmware_data
    padded_firmware += (b'\xFF' * ((16 - len(firmware_data) % 16) % 16))

    # Add the password as a signature for the bootloader to check
    padded_firmware += password

    # creating new aes object. We can only use this object once
    cipher = AES.new(key, AES.MODE_CBC, iv)

    # encrypt() returns a byte string e.g. b'0123456789abcdef'
    encrypted_firmware = cipher.encrypt(padded_firmware)

    # In order to meet functional and security requirements we need 2 things:
    # For function, we need to make it cap off at version 0xFFFF
    # And for security we need to encrypt it and add a password for authentiction and integrity

    # So here we check if the size is bigger than 8 bits
    if 255 < version < 65535:
        # and this packs it into a 16 bit byte represented as two 8 bit bytes
        padded_version = version.to_bytes(2, 'little')
    elif version < 255:
        # otherwise we turn it into one byte of 0x00 and one byte of the actual number
        padded_version = b'\x00' + version.to_bytes(1, 'little')
    else:
        # Here it is greater than 0xFFFF, which we will just cap to 0xFFFF
        padded_version = b'\xff\xff'
    
    # So we have 2 bytes of data, and we need to add 14 extra bytes to make it encryptable by AES (16 bytes)
    # Previously it was just padding 14 null bytes to the end, but this would make it MUCH easier to brute force the aes key and iv
    # So we add 14 random bytes now, which for all intents and purposes makes it impossible to brute force
    padded_version += os.urandom(14)
    # Add password as signature which brings the total size to 32 bytes
    padded_version += password

    # new aes object. We can only use this object once
    versioncip = AES.new(key, AES.MODE_CBC, iv)

    # encrypt() returns a byte string e.g. b'0123456789abcdef'
    encrypted_version = versioncip.encrypt(padded_version)

    log.info("Packaging the firmware...")

    # Create firmware storage structure
    data = {
        "firmware_size": len(encrypted_firmware),
        "version_num": encrypted_version.hex(),
        "release_msg": release_message,
        "firmware": encrypted_firmware.hex()
    }

    # Open/create a new file which will contain all the info above, and package it into a nice json file.
    with protected_firmware.open("w", encoding="utf8") as pf:
        json.dump(data, pf)

    log.info("Firmware protected\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--firmware", help="The name of the firmware image to protect.", required=True
    )
    parser.add_argument(
        "--version", help="The version of this firmware.", type=int, required=True
    )
    parser.add_argument(
        "--release-message", help="The release message of this firmware.", required=True
    )
    parser.add_argument(
        "--output-file", help="The name of the protected firmware image.", required=True
    )

    args = parser.parse_args()

    # process command
    firmware_file = FIRMWARE_ROOT / args.firmware
    protected_firmware = FIRMWARE_ROOT / args.output_file
    protect_firmware(
        firmware_file, args.version, args.release_message, protected_firmware
    )


if __name__ == "__main__":
    main()
