#!/usr/bin/python3 -u

# 2022 eCTF
# Protect Firmware Tool
# Kyle Scaplen
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!

import argparse
from importlib.resources import path
import json
import logging
import Crypto
from Crypto.Cipher import AES
from pathlib import Path

from util import print_banner, FIRMWARE_ROOT, LOG_FORMAT

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def protect_firmware(
    firmware_file: Path, version: int, release_message: str, protected_firmware: Path
):
    print_banner("SAFFIRe Firmware Protect Tool")

    # Read in the raw firmware binary
    log.info("Reading the firmware...")
    firmware_data = firmware_file.read_bytes()

    log.info("Packaging the firmware...")

    # Construct the metadata
    firmware_size = len(firmware_data)

    # Create firmware storage structure
    data = {
        "firmware_size": firmware_size,
        "version_num": version,
        "release_msg": release_message,
        "firmware": firmware_data.hex(),
    }

    # Pack the firmware
    packed_path = Path("./firmware/packed-fw-file")

    # Open/create a new file which will contain the packed fw info, but be completely unencrypted
    """with packed_path.open("w", encoding="utf8") as pp:  # pp LOL
        json.dump(data. fd)"""

    """from pathlib import Path
import json
import os
import Crypto
from Crypto.Cipher import AES

def main():
    stuff = Path("./here/hello")
    cumstuff = Path("here/cumstuff")
    poop = Path("here/poop")
    writing = os.urandom(16)

    iv = os.urandom(16)
    key = os.urandom(16)

    data = {
        "cum" : 1234,
        "penis" :"bagasdaina!",
        "twelve" : 11

    }

    stuff.write_bytes(writing)
    
    with cumstuff.open("w", encoding="utf8") as st:
        json.dump(data,st)
    
    asd = open(cumstuff, "rb")
    rad = bytes(chr(asd.read()).append(os.urandom(len(asd) % 16)))
    port = open(poop, "wb")

    cip = AES.new(key, AES.MODE_CBC, iv)
    port.write(cip.encrypt(plaintext=rad))





if __name__ == "__main__":
    main()
"""

    log.info("Firmware protected\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--firmware", help="The name of the firmware image to protect.", required=True
    )
    parser.add_argument(
        "--version", help="The version of this firmware.", type=int, required=True
    )
    parser.add_argument(
        "--release-message", help="The release message of this firmware.", required=True
    )
    parser.add_argument(
        "--output-file", help="The name of the protected firmware image.", required=True
    )

    args = parser.parse_args()

    # process command
    firmware_file = FIRMWARE_ROOT / args.firmware
    protected_firmware = FIRMWARE_ROOT / args.output_file
    protect_firmware(
        firmware_file, args.version, args.release_message, protected_firmware
    )


if __name__ == "__main__":
    main()
