#!/usr/bin/python3 -u

# 2022 eCTF
# Update Tool
# 0xDACC
#
# This tool meets all functional and security requirements. This tool doesn't do much special, since the functionality of updating needs to stay the same

import argparse
import json
import logging
from pathlib import Path
from platform import release
import socket
import struct
from Crypto.Cipher import AES

from util import print_banner, send_packets, RESP_OK, FIRMWARE_ROOT, LOG_FORMAT

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def update_firmware(socket_number: int, firmware_file: Path):
    print_banner("SAFFIRe Firmware Update Tool")

    log.info("Reading firmware file...")
    with firmware_file.open("rb") as fw:
        data = json.load(fw)
        version_num = bytes.fromhex(data["version_num"])
        release_msg: str = data["release_msg"]
        firmware = bytes.fromhex(data["firmware"])
        firmware_size = len(firmware)

        # Truncate release message if greater than 1k to stop any overflow bugs
        if len(release_msg) > 1024:
            release_msg = release_msg[0:1024]

    # Connect to the bootloader
    log.info("Connecting socket...")
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect(("saffire-net", socket_number))

        # Send update command
        log.info("Sending update command...")
        sock.send(b"U")

        # Receive bootloader acknowledgement
        log.info("Waiting for bootloader to enter update mode...")
        while sock.recv(1) != b"U":
            pass

        # Send the version, size, and release message
        log.info("Sending version, size, and release message...")
        # Send the encrypted version number
        send_packets(sock, version_num)
        payload = (
            struct.pack(">I", firmware_size)
            + release_msg.encode()
            + b"\x00"
        )
        sock.send(payload)
        response = sock.recv(1)
        if response == b'\x01':
            exit(f"ERROR: Bad Version. Bootloader responded with {repr(response)}")

        # Send packets
        log.info("Sending firmware packets...")

        # Send first password section
        send_packets(sock, firmware[0:16])
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bad Firmware. Bootloader responded with {repr(response)}")
        
        # recieve crypto information
        key = sock.recv(16)
        iv = sock.recv(16)

        # Decrypt
        cip = AES.new(key, AES.MODE_CBC, iv)
        dec_fw = cip.decrypt(firmware)

        # Send last password to bootloader to decide if this is a valid image
        send_packets(sock, dec_fw[-16:])
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bad Firmware. Bootloader responded with {repr(response)}")

        # Send firmware, not including password
        send_packets(sock, dec_fw[:-16])
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bad Firmware. Bootloader responded with {repr(response)}")
        log.info("Firmware updated\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--socket",
        help="Port number of the socket to connect the host to the bootloader.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--firmware-file", help="Name of the firmware image to load.", required=True
    )

    args = parser.parse_args()

    firmware_file = FIRMWARE_ROOT / args.firmware_file

    update_firmware(args.socket, firmware_file)


if __name__ == "__main__":
    main()
