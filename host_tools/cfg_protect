#!/usr/bin/python3 -u

# 2022 eCTF
# Protect Configuration Tool
# 0xDACC
#
# This tool meets all functional and security requiremnets. The way this tool works is prettyt neat actually and took some thought.
# It packs on a 16 byte password for authentication onto the end of the data, which is then encrypted along side the rest of the data.
# Due to the nature of CBC decryption, and since the password is at the very end, if any byte before the password is messed with before decryption, then the password wont decrypt right.
# Authentication and integrity combined into one step! Now that's efficient!

import argparse
import logging
from pathlib import Path
from Crypto.Cipher import AES

from util import print_banner, CONFIGURATION_ROOT, LOG_FORMAT

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def protect_configuration(raw_cfg: Path, protected_cfg: Path):
    print_banner("SAFFIRe Configuration Protect Tool")

    # Read in the raw configuration binary
    log.info("Reading configuration data...")
    file_data = raw_cfg.read_bytes()

    log.info("Encrypting the configuration...")

    # Read the crypto info from the host secrets files
    key = Path("/secrets/key").read_bytes()
    iv = Path("/secrets/iv").read_bytes()
    password = Path("/secrets/password").read_bytes()

    # Pad extra data on the end of the file to make sure its compatable with aes block sizes (128 bits / 16 bytes)
    padded_cfg = file_data
    padded_cfg += (b'\xFF' * ((16 - len(file_data) % 16) % 16))

    # Add password as signature for bootloader to check
    # padded_cfg += password
    
    # creating new aes object. We can only use this object once.
    cipher = AES.new(key, AES.MODE_CBC, iv)

    # encrypt() returns a byte string e.g. b'0123456789abcdef'
    encrypted_cfg = cipher.encrypt(padded_cfg)

    log.info("Packaging the configuration...")

    # Write to the output file
    protected_cfg.write_bytes(encrypted_cfg)

    log.info("Configuration protected\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input-file", help="The name of the configuration to protect.", required=True
    )
    parser.add_argument(
        "--output-file", help="The name of the protected configuration.", required=True
    )

    args = parser.parse_args()

    # process command
    raw_cfg = CONFIGURATION_ROOT / args.input_file
    protected_cfg = CONFIGURATION_ROOT / args.output_file
    protect_configuration(raw_cfg, protected_cfg)


if __name__ == "__main__":
    main()
